networks:
  nginx-manager_customnetwork:
    external: true

services:
  old-eews-zookeeper:
    networks:
      - nginx-manager_customnetwork
    restart: always
    image: confluentinc/cp-zookeeper
    container_name: old-eews-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2485

  old-eews-kafka:
    networks:
      - nginx-manager_customnetwork
    restart: always
    container_name: old-eews-kafka
    image: confluentinc/cp-kafka
    depends_on:
      - old-eews-zookeeper
    ports:
      - "2486:2486"
      - "2487:2487"

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "old-eews-zookeeper:2485"
      KAFKA_LISTENERS: DOCKER://old-eews-kafka:9092,LOCAL://old-eews-kafka:2486,OUTSIDE://old-eews-kafka:2487
      KAFKA_ADVERTISED_LISTENERS: DOCKER://old-eews-kafka:9092,LOCAL://localhost:2486,OUTSIDE://34.23.119.16:2487
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
    mem_limit: 1228m

  old-eews-kafka-2:
    networks:
      - nginx-manager_customnetwork
    restart: always
    container_name: old-eews-kafka-2
    image: confluentinc/cp-kafka
    depends_on:
      - old-eews-zookeeper
    ports:
      - "2494:2494"
      - "2495:2495"

    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "old-eews-zookeeper:2485"
      KAFKA_LISTENERS: DOCKER://old-eews-kafka-2:9092,LOCAL://old-eews-kafka-2:2494,OUTSIDE://old-eews-kafka-2:2495
      KAFKA_ADVERTISED_LISTENERS: DOCKER://old-eews-kafka-2:9092,LOCAL://localhost:2494,OUTSIDE://34.23.119.16:2495
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
    mem_limit: 1228m

  old-eews-kafka-3:
    networks:
      - nginx-manager_customnetwork
    restart: always
    container_name: old-eews-kafka-3
    image: confluentinc/cp-kafka
    depends_on:
      - old-eews-zookeeper
    ports:
      - "2496:2496"
      - "2497:2497"

    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "old-eews-zookeeper:2485"
      KAFKA_LISTENERS: DOCKER://old-eews-kafka-3:9092,LOCAL://old-eews-kafka-3:2496,OUTSIDE://old-eews-kafka-3:2497
      KAFKA_ADVERTISED_LISTENERS: DOCKER://old-eews-kafka-3:9092,LOCAL://localhost:2496,OUTSIDE://34.23.119.16:2497
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
    mem_limit: 1228m

  old-eews-init-kafka:
    networks:
      - nginx-manager_customnetwork
    container_name: old-eews-init-kafka
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - old-eews-kafka
      - old-eews-kafka-2
      - old-eews-kafka-3
      - old-eews-zookeeper
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server old-eews-kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server old-eews-kafka:9092 --create --if-not-exists --topic query --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      kafka-topics --bootstrap-server old-eews-kafka:9092 --create --if-not-exists --topic p_arrival --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      kafka-topics --bootstrap-server old-eews-kafka:9092 --create --if-not-exists --topic pick --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server old-eews-kafka:9092 --list
      "

  old-eews-redis:
    networks:
      - nginx-manager_customnetwork
    image: redis
    container_name: old-eews-redis
    volumes:
      - redis_data:/data

  old-eews-seeder:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    depends_on:
      - old-eews-redis
    image: docker.io/slackingdjaeger/old-eews-seeder:latest
    container_name: old-eews-seeder

  old-eews-producer:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    restart: always
    depends_on:
      old-eews-init-kafka:
        condition: service_completed_successfully
      old-eews-seeder:
        condition: service_completed_successfully
    image: docker.io/slackingdjaeger/old-eews-producer:latest
    container_name: old-eews-producer
    ports:
      - "2488:8000"

  old-eews-queue:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    restart: always
    depends_on:
      - old-eews-init-kafka
      - old-eews-producer
      - old-eews-zookeeper
      - old-eews-kafka
    image: docker.io/slackingdjaeger/old-eews-queue:latest
    container_name: old-eews-queue
    mem_limit: 60m

  old-eews-picker:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    restart: always
    depends_on:
      - old-eews-nginx
      - old-eews-mongo
      - old-eews-redis
    image: docker.io/slackingdjaeger/old-eews-picker:latest
    container_name: old-eews-picker

  old-eews-ml:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    restart: always
    image: docker.io/slackingdjaeger/old-eews-ml:latest
    container_name: old-eews-ml
    depends_on:
      - old-eews-redis
    mem_limit: 7168m

  old-eews-nginx:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    image: docker.io/slackingdjaeger/old-eews-nginx:latest
    container_name: old-eews-nginx
    depends_on:
      - old-eews-ml

  old-eews-ws-rest:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    restart: always
    depends_on:
      - old-eews-producer
      - old-eews-seeder
    image: docker.io/slackingdjaeger/old-eews-ws-rest:latest
    container_name: old-eews-ws-rest
    ports:
      - "2489:8080"

  old-eews-frontend:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    depends_on:
      - old-eews-ws-rest
    image: docker.io/slackingdjaeger/old-eews-frontend:latest
    container_name: old-eews-frontend
    ports:
      - "2490:3000"

  old-eews-mongo:
    networks:
      - nginx-manager_customnetwork
    image: mongo:latest
    container_name: old-eews-mongo
    volumes:
      - mongodb_data:/data/db

  old-eews-redis-admin:
    image: rediscommander/redis-commander:latest
    container_name: old-eews-redis-admin
    networks:
      - nginx-manager_customnetwork
    environment:
      - REDIS_HOSTS=local:old-eews-redis:6379
    ports:
      - "2491:8081"

  # MongoDB Admin (Mongo Express)
  old-eews-mongo-admin:
    image: mongo-express:latest
    container_name: old-eews-mongo-admin
    networks:
      - nginx-manager_customnetwork
    depends_on:
      - old-eews-mongo
    environment:
      ME_CONFIG_MONGODB_SERVER: old-eews-mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    ports:
      - "2492:8081"

  # Kafdrop (Kafka Web UI)
  old-eews-kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: old-eews-kafdrop
    networks:
      - nginx-manager_customnetwork
    depends_on:
      - old-eews-kafka
      - old-eews-kafka-2
      - old-eews-kafka-3
    ports:
      - "2493:9000"
    environment:
      KAFKA_BROKERCONNECT: "old-eews-kafka:9092,old-eews-kafka-2:9092,old-eews-kafka-3:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"

volumes:
  mongodb_data:
  redis_data:
