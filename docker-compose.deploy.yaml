networks:
  nginx-manager_customnetwork:
    external: true

services:
  old-eews-zookeeper:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.60
    restart: always
    image: confluentinc/cp-zookeeper
    container_name: demo-eews-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182

  old-eews-kafka:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.61
    restart: always
    container_name: demo-eews-kafka
    image: confluentinc/cp-kafka
    depends_on:
      - old-eews-zookeeper
    ports:
      - "9100:9100"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "172.20.0.60:2182"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9100
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://172.20.0.61:9092,OUTSIDE://85.209.163.202:9100
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    mem_limit: 1228m

  old-eews-kafka-2:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.62
    restart: always
    container_name: demo-eews-kafka-2
    image: confluentinc/cp-kafka
    depends_on:
      - old-eews-zookeeper
    ports:
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "172.20.0.60:2182"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9101
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://172.20.0.62:9092,OUTSIDE://85.209.163.202:9101
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    mem_limit: 1228m

  old-eews-kafka-3:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.63
    restart: always
    container_name: demo-eews-kafka-3
    image: confluentinc/cp-kafka
    depends_on:
      - old-eews-zookeeper
    ports:
      - "9102:9102"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "172.20.0.60:2182"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9102
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://172.20.0.63:9092,OUTSIDE://85.209.163.202:9102
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    mem_limit: 1228m

  old-eews-init-kafka:
    networks:
      - nginx-manager_customnetwork
    container_name: demo-eews-init-kafka
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - old-eews-kafka
      - old-eews-kafka-2
      - old-eews-kafka-3
      - old-eews-zookeeper
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server old-eews-kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server old-eews-kafka:9092 --create --if-not-exists --topic query --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      kafka-topics --bootstrap-server old-eews-kafka:9092 --create --if-not-exists --topic p_arrival --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      kafka-topics --bootstrap-server old-eews-kafka:9092 --create --if-not-exists --topic pick --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server old-eews-kafka:9092 --list
      "

  old-eews-redis:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.64
    image: redis
    container_name: demo-eews-redis
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"

  old-eews-seeder:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    depends_on:
      - old-eews-redis
    image: docker.io/slackingdjaeger/old-eews-seeder:latest
    container_name: demo-eews-seeder

  old-eews-producer:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.65
    restart: always
    depends_on:
      old-eews-init-kafka:
        condition: service_completed_successfully
      old-eews-seeder:
        condition: service_completed_successfully
    image: docker.io/slackingdjaeger/old-eews-producer:latest
    container_name: demo-eews-producer
    ports:
      - "8000:8000"
      - "8001:8001"

  old-eews-queue:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.66
    restart: always
    depends_on:
      - old-eews-init-kafka
      - old-eews-producer
      - old-eews-zookeeper
      - old-eews-kafka
    image: docker.io/slackingdjaeger/old-eews-queue:latest
    container_name: demo-eews-queue
    mem_limit: 60m
    ports:
      - "8002:8002"

  old-eews-picker:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.67
    restart: always
    depends_on:
      - old-eews-nginx
      - old-eews-mongo
      - old-eews-redis
    image: docker.io/slackingdjaeger/old-eews-picker:latest
    container_name: demo-eews-picker

  old-eews-ml:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.68
    restart: always
    image: docker.io/slackingdjaeger/old-eews-ml:latest
    container_name: demo-eews-ml
    depends_on:
      - old-eews-redis
    ports:
      - "8100:8100"

  old-eews-nginx:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.69
    image: docker.io/slackingdjaeger/old-eews-nginx:latest
    container_name: demo-eews-nginx
    depends_on:
      - old-eews-ml

  old-eews-ws-rest:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.70
    restart: always
    depends_on:
      - old-eews-producer
      - old-eews-seeder
    image: docker.io/slackingdjaeger/old-eews-ws-rest:latest
    container_name: demo-eews-ws-rest
    ports:
      - "8081:8080"

  old-eews-frontend:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.71
    depends_on:
      - old-eews-ws-rest
    image: docker.io/slackingdjaeger/old-eews-frontend:latest
    container_name: demo-eews-frontend
    ports:
      - "3001:3000"

  old-eews-mongo:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.72
    image: mongo:latest
    container_name: demo-eews-mongo
    volumes:
      - mongodb_data:/data/db
    ports:
        - "27018:27017"

  # Kafdrop (Kafka Web UI)
  old-eews-kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: demo-eews-kafdrop
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.75
    depends_on:
      - old-eews-kafka
      - old-eews-kafka-2
      - old-eews-kafka-3
    ports:
      - "9002:9000"
    environment:
      KAFKA_BROKERCONNECT: "172.20.0.61:9092,172.20.0.62:9092,172.20.0.63:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"

volumes:
  mongodb_data:
  redis_data:
