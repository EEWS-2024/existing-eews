networks:
  nginx-manager_customnetwork:
    external: true

services:
  main-eews-zookeeper:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.76
    restart: always
    image: confluentinc/cp-zookeeper
    container_name: main-eews-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2183

  main-eews-kafka:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.77
    restart: always
    container_name: main-eews-kafka
    image: confluentinc/cp-kafka
    depends_on:
      - main-eews-zookeeper
    ports:
      - "9103:9103"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "172.20.0.76:2183"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,OUTSIDE://0.0.0.0:9103
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://172.20.0.77:9093,OUTSIDE://85.209.163.202:9103
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  main-eews-kafka-2:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.78
    restart: always
    container_name: main-eews-kafka-2
    image: confluentinc/cp-kafka
    depends_on:
      - main-eews-zookeeper
    ports:
      - "9104:9104"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "172.20.0.76:2183"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,OUTSIDE://0.0.0.0:9104
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://172.20.0.78:9093,OUTSIDE://85.209.163.202:9104
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  main-eews-kafka-3:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.79
    restart: always
    container_name: main-eews-kafka-3
    image: confluentinc/cp-kafka
    depends_on:
      - main-eews-zookeeper
    ports:
      - "9105:9105"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "172.20.0.76:2183"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,OUTSIDE://0.0.0.0:9105
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://172.20.0.79:9093,OUTSIDE://85.209.163.202:9105
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  main-eews-init-kafka:
    networks:
      - nginx-manager_customnetwork
    container_name: main-eews-init-kafka
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - main-eews-kafka
      - main-eews-kafka-2
      - main-eews-kafka-3
      - main-eews-zookeeper
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server main-eews-kafka:9093 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server main-eews-kafka:9093 --create --if-not-exists --topic query --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      kafka-topics --bootstrap-server main-eews-kafka:9093 --create --if-not-exists --topic p_arrival --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      kafka-topics --bootstrap-server main-eews-kafka:9093 --create --if-not-exists --topic pick --replication-factor 3 --partitions 3 --config segment.bytes=150000 --config retention.bytes=3000000 --config retention.ms=120000
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server main-eews-kafka:9093 --list
      "

  main-eews-redis:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.80
    image: redis
    container_name: main-eews-redis
    volumes:
      - redis_data:/data
    ports:
      - "6381:6379"

  main-eews-seeder:
    pull_policy: "always"
    networks:
      - nginx-manager_customnetwork
    depends_on:
      - main-eews-redis
    image: docker.io/slackingdjaeger/main-eews-seeder:latest
    container_name: main-eews-seeder

  main-eews-producer:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.81
    restart: always
    depends_on:
      main-eews-init-kafka:
        condition: service_completed_successfully
      main-eews-seeder:
        condition: service_completed_successfully
    image: docker.io/slackingdjaeger/main-eews-producer:latest
    container_name: main-eews-producer
    ports:
      - "8003:8003"
      - "8004:8004"

  main-eews-queue:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.82
    restart: always
    depends_on:
      - main-eews-init-kafka
      - main-eews-producer
      - main-eews-zookeeper
      - main-eews-kafka
    image: docker.io/slackingdjaeger/main-eews-queue:latest
    container_name: main-eews-queue
    mem_limit: 60m
    ports:
      - "8005:8005"

  main-eews-picker:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.83
    restart: always
    depends_on:
      - main-eews-init-kafka
      - main-eews-nginx
      - main-eews-mongo
      - main-eews-redis
    image: docker.io/slackingdjaeger/main-eews-picker:latest
    container_name: main-eews-picker

  main-eews-ml:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.84
    restart: always
    image: docker.io/slackingdjaeger/main-eews-ml:latest
    container_name: main-eews-ml
    depends_on:
      - main-eews-redis
    ports:
      - "8007:8007"

  main-eews-nginx:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.85
    image: docker.io/slackingdjaeger/main-eews-nginx:latest
    container_name: main-eews-nginx
    depends_on:
      - main-eews-ml
    ports:
      - "8008:80"

  main-eews-ws-rest:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.86
    restart: always
    depends_on:
      - main-eews-producer
      - main-eews-seeder
    image: docker.io/slackingdjaeger/main-eews-ws-rest:latest
    container_name: main-eews-ws-rest
    ports:
      - "8009:8080"

  main-eews-frontend:
    pull_policy: "always"
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.87
    depends_on:
      - main-eews-ws-rest
    image: docker.io/slackingdjaeger/main-eews-frontend:latest
    container_name: main-eews-frontend
    ports:
      - "3002:3000"

  main-eews-mongo:
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.88
    image: mongo:latest
    container_name: main-eews-mongo
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27019:27017"

  # Kafdrop (Kafka Web UI)
  main-eews-kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: main-eews-kafdrop
    networks:
      nginx-manager_customnetwork:
        ipv4_address: 172.20.0.89
    depends_on:
      - main-eews-kafka
      - main-eews-kafka-2
      - main-eews-kafka-3
    ports:
      - "9003:9000"
    environment:
      KAFKA_BROKERCONNECT: "172.20.0.77:9093,172.20.0.78:9093,172.20.0.79:9093"
      JVM_OPTS: "-Xms32M -Xmx64M"

volumes:
  mongodb_data:
  redis_data:
